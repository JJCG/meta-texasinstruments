--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/inc/Makefile	2008-03-03 13:39:45.000000000 -0600
@@ -0,0 +1,18 @@
+
+HSRC=PolicyManagerAPI.h 
+
+HTARGET=$(HSRC:%=$(SYSTEMINCLUDEDIR)/%)
+
+include $(OMXROOT)/Master.mk
+
+all install:: $(SYSTEMINCLUDEDIR) $(HTARGET) 
+
+$(SYSTEMINCLUDEDIR)/%: % 
+	cp -f $< $@
+
+clobber::
+	rm -f $(SYSTEMINCLUDEDIR)/PolicyManagerAPI.h
+
+
+
+
--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/inc/PolicyManagerAPI.h	2008-11-10 16:46:59.000000000 -0600
@@ -0,0 +1,98 @@
+/* ==============================================================================
+*             Texas Instruments OMAP (TM) Platform Software
+*  (c) Copyright Texas Instruments, Incorporated.  All Rights Reserved.
+*
+*  Use of this software is controlled by the terms and conditions found 
+*  in the license agreement under which this software has been supplied.
+* ============================================================================ */
+/**
+* @file PolicyManager.h
+*
+* This file contains the definitions used by OMX component and resource manager to 
+* access common items. This file is fully compliant with the OMX Audio specification 1.5.
+*
+* @path  $(CSLPATH)\
+*
+* @rev  1.0
+*/
+/* ---------------------------------------------------------------------------- 
+*! 
+*! Revision History 
+*! ===================================
+*! 14-Apr-2006 rg:  Initial Version. 
+*!
+* ============================================================================= */
+ 
+#ifndef POLICYMANAGERAPI_H__
+#define POLICYMANAGERAPI_H__
+
+
+#include <OMX_Types.h>
+#include <OMX_Core.h>
+
+#define PM_SERVER_IN "/dev/pm_server_in"
+#define PM_SERVER_OUT "/dev/pm_server_out"   
+#define PERMS 0666
+
+/** The PolicyManager command type enumeration is used to specify the action in the
+ *  RM_SendCommand method.
+ */
+typedef enum _PM_COMMANDTYPE
+{
+    PM_Init = 1, 
+	PM_RequestPolicy,    
+	PM_WaitForPolicy,
+	PM_FreePolicy,
+	PM_CancelWaitForPolicy,
+	PM_FreeResources,
+	PM_StateSet,
+	PM_OpenPipe,
+	PM_Exit,
+	PM_ExitTI
+} PM_COMMANDTYPE;
+
+/** The _RM_COMMANDDATATYPE structure defines error structure
+ */
+#if 1
+typedef enum _POLICYMANAGER_ERRORTYPE
+{
+  PM_ErrorNone = 0,
+  PM_GRANT, 
+  PM_DENY, 
+  PPM_ErrorMax = 0x7FFFFFFF
+} POLICYMANAGER_ERRORTYPE;
+#endif
+
+typedef enum _POLICYMANAGER_TORESOURCEMANAGER
+{
+    PM_GRANTPOLICY = 0,
+    PM_DENYPOLICY,
+    PM_PREEMPTED
+} POLICYMANAGER_TORESOURCEMANAGER;
+
+/** The _RM_COMMANDDATATYPE structure defines command data structure
+ */
+typedef struct _POLICYMANAGER_COMMANDDATATYPE
+{
+  OMX_HANDLETYPE			hComponent;  
+  OMX_U32                                 nPid;
+  PM_COMMANDTYPE			PM_Cmd; 
+  OMX_U32					param1;  
+  OMX_U32                                 param2;
+  OMX_U32                                 param3;
+  POLICYMANAGER_ERRORTYPE	rm_status;
+} POLICYMANAGER_COMMANDDATATYPE; 
+
+typedef struct _POLICYMANAGER_RESPONSEDATATYPE
+{
+  OMX_HANDLETYPE                                                         hComponent;  
+  OMX_U32                                   nPid;
+  POLICYMANAGER_TORESOURCEMANAGER                       PM_Cmd; 
+  OMX_U32					                                    param1;  
+  OMX_U32                                 param2;
+  OMX_U32                                 param3;
+  POLICYMANAGER_ERRORTYPE	rm_status;
+} POLICYMANAGER_RESPONSEDATATYPE; 
+
+#endif
+
--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/inc/PolicyManager.h	2008-11-10 16:46:59.000000000 -0600
@@ -0,0 +1,162 @@
+/* ==============================================================================
+*             Texas Instruments OMAP (TM) Platform Software
+*  (c) Copyright Texas Instruments, Incorporated.  All Rights Reserved.
+*
+*  Use of this software is controlled by the terms and conditions found 
+*  in the license agreement under which this software has been supplied.
+* ============================================================================ */
+/**
+* @file ResourceManager.h
+*
+* This file contains the definitions used by OMX component and resource manager to 
+* access common items. This file is fully compliant with the Khronos 1.0 specification.
+*
+* @path  $(CSLPATH)\
+*
+* @rev  1.0
+*/
+/* ---------------------------------------------------------------------------- 
+*! 
+*! Revision History 
+*! ===================================
+*! 14-Apr-2005 rg:  Initial Version. 
+*!
+* ============================================================================= */
+ 
+#ifndef POLICYMANAGER_H__
+#define POLICYMANAGER_H__
+
+#include <PolicyManagerAPI.h>
+
+/* add for Qos API
+#include <dbapi.h>
+#include "dasf_ti.h"
+*/
+
+#undef PM_DEBUG 
+#ifdef  PM_DEBUG
+        #define PM_DPRINT(...)    fprintf(stdout,__VA_ARGS__)
+#else
+        #define PM_DPRINT(...)
+#endif
+
+#define MAXSTREAMCOUNT	10
+#define RESOURCEMANAGERID 7
+#define RM_MAXCOMPONENTS 100
+#define PM_POLICYTABLEFILE "/omx/policytable.tbl"
+#define PM_MAXSTRINGLENGTH 2000
+#define RM_IMAGE 1
+#define RM_VIDEO 2
+#define RM_AUDIO 3
+#define RM_LCD 4
+#define RM_CAMERA 5
+#define PM_NUM_COMPONENTS 41
+#define OMX_POLICY_MAX_COMBINATION_LENGTH 50
+#define OMX_POLICY_MAX_COMBINATIONS 100
+
+char *PM_ComponentTable[PM_NUM_COMPONENTS]= {
+	/* audio component*/
+	"OMX_MP3_Decoder_COMPONENT",
+	"OMX_AAC_Decoder_COMPONENT",
+	"OMX_AAC_Encoder_COMPONENT",
+	"OMX_PCM_Decoder_COMPONENT",
+	"OMX_PCM_Encoder_COMPONENT",
+	"OMX_NBAMR_Decoder_COMPONENT",
+	"OMX_NBAMR_Encoder_COMPONENT",
+	"OMX_WBAMR_Decoder_COMPONENT",
+	"OMX_WBAMR_Encoder_COMPONENT",
+	"OMX_WMA_Decoder_COMPONENT",
+	"OMX_G711_Decoder_COMPONENT",
+	"OMX_G711_Encoder_COMPONENT",
+	"OMX_G722_Decoder_COMPONENT",
+	"OMX_G722_Encoder_COMPONENT",
+	"OMX_G723_Decoder_COMPONENT",
+	"OMX_G723_Encoder_COMPONENT",
+	"OMX_G726_Decoder_COMPONENT",
+	"OMX_G726_Encoder_COMPONENT",
+	"OMX_G729_Decoder_COMPONENT",
+	"OMX_G729_Encoder_COMPONENT",
+       "OMX_GSMFR_Decoder_COMPONENT",
+       "OMX_GSMHR_Decoder_COMPONENT",
+       "OMX_GSMFR_Encoder_COMPONENT",
+       "OMX_GSMHR_Encoder_COMPONENT",
+       "OMX_ILBC_Decoder_COMPONENT",
+       "OMX_ILBC_Encoder_COMPONENT",
+       "OMX_IMAADPCM_Decoder_COMPONENT",
+       "OMX_IMAADPCM_Encoder_COMPONENT",
+
+	/* video*/
+	"OMX_MPEG4_Decode_COMPONENT",
+	"OMX_MPEG4_Encode_COMPONENT",
+	"OMX_H263_Decode_COMPONENT",
+	"OMX_H263_Encode_COMPONENT",
+	"OMX_H264_Decode_COMPONENT",
+	"OMX_H264_Encode_COMPONENT",
+       "OMX_WMV_Decode_COMPONENT",
+       "OMX_MPEG2_Decode_COMPONENT",
+	
+	/* image*/
+	"OMX_JPEG_Decoder_COMPONENT",
+	"OMX_JPEG_Encoder_COMPONENT",
+	"OMX_VPP_COMPONENT",
+
+	/* camera*/
+	"OMX_CAMERA_COMPONENT",
+	"OMX_DISPLAY_COMPONENT"
+
+};
+
+typedef struct OMX_POLICY_COMPONENT_PRIORITY {
+    OMX_COMPONENTINDEXTYPE component;
+    OMX_U8 priority;
+} OMX_POLICY_COMPONENT_PRIORITY;
+
+
+typedef struct OMX_POLICY_COMBINATION {
+    OMX_U8 numComponentsInCombination;
+    OMX_BOOL bCombinationIsActive;
+    OMX_POLICY_COMPONENT_PRIORITY component[OMX_POLICY_MAX_COMBINATION_LENGTH];
+} OMX_POLICY_COMBINATION;
+
+
+typedef struct OMX_POLICY_COMBINATION_LIST {
+    OMX_U8 numCombinations;
+    OMX_U8 combinationList[OMX_POLICY_MAX_COMBINATIONS];
+}OMX_POLICY_COMBINATION_LIST;
+
+typedef struct OMX_POLICY_MANAGER_COMPONENTS_TYPE {
+    OMX_HANDLETYPE componentHandle;
+    OMX_U32 nPid;
+} OMX_POLICY_MANAGER_COMPONENTS_TYPE;
+
+// internal functions
+void FreeQos();
+void RegisterQos(); 
+void InitializeQos();
+void HandleRequestPolicy(POLICYMANAGER_COMMANDDATATYPE cmd);
+void HandleWaitForPolicy(POLICYMANAGER_COMMANDDATATYPE cmd);
+void HandleFreePolicy(POLICYMANAGER_COMMANDDATATYPE cmd);
+void HandleFreeResources(POLICYMANAGER_COMMANDDATATYPE cmd);
+void HandleCancelWaitForPolicy(POLICYMANAGER_COMMANDDATATYPE cmd);
+void PreemptComponent(OMX_HANDLETYPE hComponent, OMX_U32 aPid);
+void DenyPolicy(OMX_HANDLETYPE hComponent, OMX_U32 aPid);
+void HandleStateSet(POLICYMANAGER_COMMANDDATATYPE cmd);
+void RM_AddPipe(POLICYMANAGER_COMMANDDATATYPE cmd, int aPipe);
+void RM_ClosePipe(POLICYMANAGER_COMMANDDATATYPE cmd_data);
+int RM_GetPipe(POLICYMANAGER_COMMANDDATATYPE cmd);
+void RM_itoa(int n, char s[]);
+void RM_reverse(char s[]);
+void GrantPolicy(OMX_HANDLETYPE hComponent, OMX_U8 aComponentIndex, OMX_U8 aPriority, OMX_U32 aPid);
+void RemoveComponentFromList(OMX_HANDLETYPE hComponent, OMX_U32 aPid) ;
+void PopulatePolicyTable();
+OMX_COMPONENTINDEXTYPE PolicyStringToIndex(char* aString) ;
+OMX_BOOL CheckActiveCombination(OMX_COMPONENTINDEXTYPE componentRequestingPolicy, int *priority);
+OMX_BOOL CheckAllCombinations(OMX_COMPONENTINDEXTYPE componentRequestingPolicy, int *combination, int *priority);
+OMX_POLICY_COMBINATION_LIST GetSupportingCombinations(OMX_COMPONENTINDEXTYPE componentRequestingPolicy);
+OMX_BOOL CanAllComponentsCoexist(OMX_COMPONENTINDEXTYPE componentRequestingPolicy,int *combination);
+int GetPriority(OMX_COMPONENTINDEXTYPE component, int combination);
+
+
+
+#endif
+
--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/Makefile	2008-03-03 13:44:04.000000000 -0600
@@ -0,0 +1,22 @@
+
+
+all::
+
+# pull in the master "inherited" definitions
+include $(OMXROOT)/Master.mk
+
+DIRS= \
+	src \
+	docs \
+	inc 
+	
+
+EXTRA=\
+	docs \
+	patterns \
+	test
+
+
+$(BASETARGETS)::
+	@$(call traverse_dirs,$(DIRS),$@)
+
--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/src/Makefile	2008-11-10 17:27:43.000000000 -0600
@@ -0,0 +1,45 @@
+# Debug Flags:
+#     0 - NO DEBUG MESSAGES
+#     1 - DEBUG MESSAGES are enabled
+
+OMX_DEBUG ?= 0      # master switch: turn debug on or off
+
+SRC=\
+	PolicyManager.c
+
+HSRC=$(wildcard ../inc/*)
+
+OBJ=$(SRC:.c=.o)
+
+include $(OMXROOT)/Master.mk
+
+CFLAGS+=-I../inc -I$(OMXINCLUDEDIR) -I$(BRIDGEINCLUDEDIR) -I$(SYSTEMINCLUDEDIR) -Wall -fpic -pipe -DOMAP_2430 
+
+COMPONENT_SYS=OMXPolicyManager
+
+COMPONENT_TARGET=$(SYSTEMDIR)/$(COMPONENT_SYS)
+
+all install:: $(COMPONENT_TARGET)
+
+omxcore $(COMPONENT_TARGET): $(SYSTEMDIR) $(COMPONENT_SYS) $(OMXLIBDIR) 
+	@echo "Installing $(COMPONENT_SYS)"
+	cp -f $(COMPONENT_SYS) $(COMPONENT_TARGET)
+	cp -f policytable.tbl $(OMXTESTDIR)
+
+$(COMPONENT_SYS): $(OBJ)
+	$(CROSS)gcc $(CFLAGS) -o $(COMPONENT_SYS) $(OBJ) -L$(BRIDGELIBDIR) -lbridge $(LOMXPERFLIB)
+
+$(SRC): $(HSRC)
+
+clean:: 
+	rm -f $(COMPONENT_SYS)
+	rm -f $(OBJ)
+	
+distclean:: clean
+
+clobber:: clean
+	@echo "Clobbering $(SYSTEMDIR)/$(COMPONENT_SYS)"
+
+	rm -f $(SYSTEMDIR)/$(COMPONENT_SYS)
+	rm -f $(OMXTESTDIR)/policytable.tbl 
+
--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/src/PolicyManager.c	2008-11-10 16:46:59.000000000 -0600
@@ -0,0 +1,561 @@
+/* ==============================================================================
+*             Texas Instruments OMAP (TM) Platform Software
+*  (c) Copyright Texas Instruments, Incorporated.  All Rights Reserved.
+*
+*  Use of this software is controlled by the terms and conditions found 
+*  in the license agreement under which this software has been supplied.
+* ============================================================================ */
+/**
+* @file PolicyManager.c
+*
+* This file implements policy manager for Linux 8.x that 
+* is fully compliant with the Khronos OpenMax specification 1.0.
+*
+* @path  $(CSLPATH)\
+*
+* @rev  1.0
+*/
+/* ---------------------------------------------------------------------------- 
+*! 
+*! Revision History 
+*! ===================================
+*! 24-Apr-2005 rg:  Initial Version. 
+*!
+* ============================================================================= */
+#include <unistd.h>     // for sleep
+#include <stdlib.h>     // for calloc
+#include <sys/time.h>   // time is part of the select logic
+#include <sys/types.h>  // for opening files
+#include <sys/ioctl.h>  // for ioctl support
+#include <sys/file.h>
+#include <sys/stat.h>
+#include <sys/errno.h>
+#include <string.h>     // for memset
+#include <stdio.h>      // for buffered io
+#include <fcntl.h>      // for opening files.
+#include <errno.h>      // for error handling support
+#include <linux/soundcard.h>
+
+#ifdef __PERF_INSTRUMENTATION__
+#include "perf.h"
+PERF_OBJHANDLE pPERF = NULL;
+#endif
+#include <ResourceManagerProxyAPI.h>
+#include <PolicyManager.h>
+int fdread, fdwrite;
+int errno;
+unsigned int totalCpu=0;
+unsigned int imageTotalCpu=0;
+unsigned int videoTotalCpu=0;
+unsigned int audioTotalCpu=0;
+unsigned int lcdTotalCpu=0;
+unsigned int cameraTotalCpu=0;
+
+int registeredComponents=0;
+int pendingComponents=0;
+
+OMX_POLICY_MANAGER_COMPONENTS_TYPE pComponentList[100];
+OMX_POLICY_MANAGER_COMPONENTS_TYPE pPendingComponentList[100];
+OMX_POLICY_COMPONENT_PRIORITY activeComponentList[100];
+OMX_POLICY_COMPONENT_PRIORITY pendingComponentList[100];
+
+OMX_POLICY_COMBINATION policyCombinationTable[OMX_POLICY_MAX_COMBINATIONS];
+
+OMX_U8 activePolicyCombination;
+OMX_U8 numCombinations;
+
+POLICYMANAGER_RESPONSEDATATYPE response_data;
+/*------------------------------------------------------------------------------------*
+  * main() 
+  *
+  *                     This is the thread of policy manager
+  *
+  * @param 
+  *                     None
+  *
+  * @retval 
+  *                     None
+  */
+/*------------------------------------------------------------------------------------*/
+int main()
+{
+    POLICYMANAGER_COMMANDDATATYPE cmd_data;
+
+    PM_DPRINT("[Policy Manager] - start policy manager main function\n");
+        
+    int size = 0;
+    int ret;
+
+    fd_set watchset;
+    OMX_BOOL Exitflag = OMX_FALSE;
+
+
+    /* Fill policy table based on text file */
+    PopulatePolicyTable();
+    
+    PM_DPRINT("[Policy Manager] - going to create the read & write pipe\n");
+    unlink(PM_SERVER_IN);
+    unlink(PM_SERVER_OUT);
+        
+    if((mknod(PM_SERVER_IN,S_IFIFO|PERMS,0)<0)&&(errno!=EEXIST)) 
+        PM_DPRINT("[Policy Manager] - mknod failure to create the read pipe, error=%d\n", errno);
+        
+    if((mknod(PM_SERVER_OUT,S_IFIFO|PERMS,0)<0)&&(errno!=EEXIST)) 
+        PM_DPRINT("[Policy Manager] - mknod failure to create the write pipe, error=%d\n", errno);
+
+
+
+    // create pipe for read
+    if((fdread=open(PM_SERVER_IN,O_RDONLY))<0)
+        PM_DPRINT("[Policy Manager] - failure to open the READ pipe\n");
+        
+    // create pipe for read
+    if((fdwrite=open(PM_SERVER_OUT,O_WRONLY))<0)
+        PM_DPRINT("[Policy Manager] - failure to open the WRITE pipe\n");
+        
+
+                
+    FD_ZERO(&watchset);
+    size=sizeof(cmd_data);
+        
+    PM_DPRINT("[Policy Manager] - going enter while loop\n");
+
+
+    while(!Exitflag) {       
+        FD_SET(fdread, &watchset);
+
+        if((select(fdread+1, &watchset, NULL, NULL, NULL))<0)
+            PM_DPRINT("[Policy Manager] - failure to create SELECT\n");
+
+        if(FD_ISSET(fdread, &watchset)) {
+            ret = read(fdread, &cmd_data, size);
+            if((size>0)&&(ret>0)) {
+
+                // actually get data 
+                PM_DPRINT("[Policy Manager] - get data\n");
+                switch (cmd_data.PM_Cmd) {  
+                    case PM_RequestPolicy:
+                        HandleRequestPolicy(cmd_data);
+                        break;
+
+                    case PM_WaitForPolicy:
+                        HandleWaitForPolicy(cmd_data);
+                        break;
+
+                    case PM_FreePolicy:
+                        HandleFreePolicy(cmd_data);
+                        break;
+
+                    case PM_CancelWaitForPolicy:
+                        break;
+                                                
+                    case PM_FreeResources:
+                        HandleFreeResources(cmd_data);
+                        break;
+                                                
+                    case PM_StateSet:
+                        break;
+                                                
+                    case PM_OpenPipe:
+                        // create pipe for read
+
+                        break;
+
+                    case PM_Exit:
+                    case PM_Init:
+                        break;
+
+                    case PM_ExitTI:
+                        Exitflag = OMX_TRUE;
+                        break;
+                }  
+            }
+            else {
+                close(fdread);
+                if((fdread=open(PM_SERVER_IN,O_RDONLY))<0)                                
+                    PM_DPRINT("[Policy Manager] - failure to re-open the Read pipe\n");
+                PM_DPRINT("[Policy Manager] - re-opened Read pipe\n");
+            }
+        }
+        else {
+            PM_DPRINT("[Policy Manager] fdread not ready\n"); 
+        }
+    }
+    close(fdread);
+    close(fdwrite);
+
+    if(unlink(PM_SERVER_IN)<0)
+        PM_DPRINT("[Policy Manager] - unlink RM_SERVER_IN error\n");
+    exit(0);
+}
+
+
+
+void HandleRequestPolicy(POLICYMANAGER_COMMANDDATATYPE cmd)
+{
+    int i;
+    int combination;
+    int priority;
+    int returnValue;
+    OMX_POLICY_COMBINATION_LIST combinationList;
+
+    /* if this is the first request make sure that there's a combination that supports it */
+    if (registeredComponents == 0) {
+        combinationList = GetSupportingCombinations(cmd.param1);
+
+        if (combinationList.numCombinations > 0) {
+            /* if it is supported, arbitrarily choose the first combination table entry that supports it */
+            activePolicyCombination = combinationList.combinationList[0];
+            /* and grant policy */
+            priority = GetPriority(cmd.param1, activePolicyCombination);
+            
+            if (priority != -1) {
+            
+                GrantPolicy(cmd.hComponent,cmd.param1,priority,cmd.nPid);
+                return;
+            }
+        }
+        else {
+            /* otherwise deny policy and return */
+            DenyPolicy(cmd.hComponent,cmd.nPid);
+            return;
+        }
+    }
+
+    /* Determine whether active policy combination will support new request */
+    returnValue = CheckActiveCombination(cmd.param1,&priority);
+
+    /* If active combination supports requested component grant policy and then return */
+    if (returnValue == OMX_TRUE) { 
+        GrantPolicy(cmd.hComponent,cmd.param1,priority,cmd.nPid);
+        return;
+    }
+
+    /* If not, determine whether there is a policy combination which will allow the new request to coexist with currently running components */
+    returnValue = CanAllComponentsCoexist(cmd.param1, &combination);
+    if (returnValue == OMX_TRUE) {
+        priority = GetPriority(cmd.param1, combination);
+        if (priority != -1) {
+            /* If so grant policy to the component requesting */
+            GrantPolicy(cmd.hComponent,cmd.param1,priority,cmd.nPid);
+
+            /* and make the new policy combination the active one */
+            activePolicyCombination = combination;
+            return;
+        }
+    }
+
+    /* If not, determine whether there is a policy combination which will allow the new request to run at all */
+   returnValue = CheckAllCombinations(cmd.param1,&combination, &priority);
+
+    if (returnValue == OMX_TRUE) {
+        for (i=0; i < registeredComponents  ; i++) {  /* The -1 is temporary until logic fixed */
+            PreemptComponent(pComponentList[i].componentHandle,pComponentList[i].nPid);
+        }
+    
+    
+        /* Then grant policy to the requested component */
+        priority = GetPriority(cmd.param1, combination);
+
+        if (priority != -1) {
+            /* If so grant policy to the component requesting */
+            GrantPolicy(cmd.hComponent,cmd.param1,priority,cmd.nPid);
+        
+            /* and make the new policy combination the active one */
+            activePolicyCombination = combination;
+            return;
+        }
+    }
+    /* otherwise deny policy */
+    DenyPolicy(cmd.hComponent,cmd.nPid);
+    
+}
+      
+void HandleWaitForPolicy(POLICYMANAGER_COMMANDDATATYPE cmd)
+{
+    pPendingComponentList[pendingComponents].componentHandle = cmd.hComponent;
+    pPendingComponentList[pendingComponents++].nPid = cmd.nPid;
+}
+
+
+void HandleCancelWaitForPolicy(POLICYMANAGER_COMMANDDATATYPE cmd)
+{
+    int i;
+    int match = -1;
+
+    for(i=0; i < pendingComponents; i++) {
+        if (pPendingComponentList[i].componentHandle == cmd.hComponent && pPendingComponentList[i].nPid == cmd.nPid) {
+            match = i;
+            break;
+        }
+    }
+
+    if (match != -1) {
+        for (i=match; i < pendingComponents-1; i++) {
+            pPendingComponentList[i].componentHandle = pPendingComponentList[i+1].componentHandle;
+            pPendingComponentList[i].nPid = pPendingComponentList[i+1].nPid;
+        }
+        pendingComponents--;
+    }
+
+}
+
+void HandleFreePolicy(POLICYMANAGER_COMMANDDATATYPE cmd)
+{
+    RemoveComponentFromList( cmd.hComponent,cmd.nPid);
+
+    /* If there are pending components one of them can now execute */
+    if (pendingComponents) {
+        
+    }
+    
+}
+
+
+void HandleFreeResources(POLICYMANAGER_COMMANDDATATYPE cmd)
+{
+    int i;
+    int lowestPriority = GetPriority(cmd.param1, activePolicyCombination);
+    int lowestPriorityIndex = -1;
+
+/* If there are lower priority or equal priority components running within active policy combination preempt the lowest */
+    for (i=0; i < registeredComponents; i++) {
+        if (pComponentList[i].componentHandle != cmd.hComponent) {
+            if (activeComponentList[i].priority <= lowestPriority) {
+                lowestPriority = activeComponentList[i].priority;
+                lowestPriorityIndex = i;
+            }
+        }
+    }
+
+    if (lowestPriorityIndex != -1) {
+        PreemptComponent(pComponentList[lowestPriorityIndex].componentHandle,pComponentList[lowestPriorityIndex].nPid);
+
+        /* Grant policy again to prompt the resource manager to again check resources */
+        GrantPolicy(cmd.hComponent,cmd.param1,GetPriority(cmd.param1, activePolicyCombination),cmd.nPid);
+        return;
+    }
+/* Otherwise inform the resource manager that it is impossible to free memory by denying policy */
+    DenyPolicy(cmd.hComponent,cmd.nPid);
+
+}
+
+
+void PreemptComponent(OMX_HANDLETYPE hComponent, OMX_U32 aPid)
+{
+    response_data.hComponent = hComponent;
+    response_data.nPid = aPid;
+    response_data.PM_Cmd = PM_PREEMPTED;
+    write(fdwrite,&response_data,sizeof(response_data));
+}
+
+
+void DenyPolicy(OMX_HANDLETYPE hComponent,OMX_U32 aPid)
+{
+    response_data.hComponent = hComponent;
+    response_data.nPid= aPid;
+    response_data.PM_Cmd = PM_DENYPOLICY;
+    write(fdwrite,&response_data,sizeof(response_data));
+}
+
+
+void GrantPolicy(OMX_HANDLETYPE hComponent, OMX_U8 aComponentIndex, OMX_U8 aPriority, OMX_U32 aPid)
+{
+    response_data.hComponent = hComponent;
+    response_data.nPid = aPid;
+    response_data.PM_Cmd = PM_GRANTPOLICY;
+    write(fdwrite, &response_data, sizeof(response_data));
+    activeComponentList[registeredComponents].component = aComponentIndex;
+    activeComponentList[registeredComponents].priority = aPriority;
+    pComponentList[registeredComponents].componentHandle = hComponent;
+    pComponentList[registeredComponents++].nPid = aPid;
+}
+
+void RemoveComponentFromList(OMX_HANDLETYPE hComponent, OMX_U32 aPid) 
+{
+    int i;
+    int match = -1;
+    for(i=0; i < registeredComponents; i++) {
+        if (pComponentList[i].componentHandle == hComponent && pComponentList[i].nPid == aPid) {
+            match = i;
+            break;
+        }
+    }
+
+    if (match != -1) {
+        for (i=match; i < registeredComponents-1; i++) {
+            pComponentList[i].componentHandle = pComponentList[i+1].componentHandle;
+            pComponentList[i].nPid = pComponentList[i+1].nPid;
+        }
+        registeredComponents--;
+    }
+}
+
+void PopulatePolicyTable()
+{
+    int i,j;
+    char line[PM_MAXSTRINGLENGTH];
+    int combinationIndex=0;
+    int policyIndex=1;
+    int index=0;
+
+    FILE *policytablefile  = fopen(PM_POLICYTABLEFILE,"r");
+
+
+    /* Initialize policy combination table */
+    for (i=0; i < OMX_POLICY_MAX_COMBINATIONS; i++) {
+        for (j=0; j < OMX_POLICY_MAX_COMBINATION_LENGTH; j++) {
+            policyCombinationTable[i].component[j].component = 0;
+            policyCombinationTable[i].component[j].priority = 0;
+        }
+        policyCombinationTable[i].bCombinationIsActive = 0;
+        policyCombinationTable[i].numComponentsInCombination = 0;
+    }
+
+    if (policytablefile == NULL) {
+        printf("Could not open file\n");
+    }
+    else {
+        while (fgets(line,PM_MAXSTRINGLENGTH,policytablefile) != NULL) {
+            char *result = NULL;   
+            result = strtok( line, "," );
+            policyCombinationTable[combinationIndex].component[0].component = PolicyStringToIndex(result);
+            result = strtok( NULL, " ,\n" );
+            policyCombinationTable[combinationIndex].component[0].priority = atoi(result);
+            policyIndex = 1;
+            while (result != NULL) {
+                result = strtok( NULL, " ,\n" );
+                if (result != NULL) {
+                    if (!(index % 2)) {
+                        policyCombinationTable[combinationIndex].component[policyIndex].component = PolicyStringToIndex(result);
+                    }
+                    else {
+                        policyCombinationTable[combinationIndex].component[policyIndex++].priority = atoi(result);
+                    }
+                    index++;
+                }
+            }
+            policyCombinationTable[combinationIndex++].numComponentsInCombination = policyIndex;
+        } 
+
+    }
+
+    numCombinations = combinationIndex;    
+}
+
+
+OMX_COMPONENTINDEXTYPE PolicyStringToIndex(char* aString) 
+{
+    int i;
+    for (i=0; i < PM_NUM_COMPONENTS; i++) {
+        if (!strcmp(aString,PM_ComponentTable[i])) {
+            return i;
+        }
+    }
+    return -1;
+}
+
+OMX_BOOL CheckActiveCombination(OMX_COMPONENTINDEXTYPE componentRequestingPolicy, int *priority)
+{
+    int i;
+    OMX_BOOL returnValue = OMX_FALSE;
+
+    for (i=0; i < policyCombinationTable[activePolicyCombination].numComponentsInCombination; i++) {
+        if (policyCombinationTable[activePolicyCombination].component[i].component == componentRequestingPolicy) {
+            returnValue = OMX_TRUE;
+            *priority = policyCombinationTable[activePolicyCombination].component[i].priority;
+            break;
+        }
+    }
+    return returnValue;
+}
+
+OMX_BOOL CheckAllCombinations(OMX_COMPONENTINDEXTYPE componentRequestingPolicy, int *combination, int *priority)
+{
+    int i,j;
+    OMX_BOOL returnValue = OMX_FALSE;
+
+    for (i=0; i < numCombinations; i++) {
+        for (j=0; j < policyCombinationTable[i].numComponentsInCombination; j++) {
+            if (policyCombinationTable[i].component[j].component == componentRequestingPolicy) {
+                returnValue = OMX_TRUE;
+                *priority = policyCombinationTable[i].component[j].priority;
+                *combination = i;
+                break;
+            }
+        }
+    }
+    return returnValue;
+}
+
+OMX_BOOL IsComponentSupported(OMX_COMPONENTINDEXTYPE component, int combination)
+{
+    int i;
+    OMX_BOOL bFound = OMX_FALSE;
+
+    for (i=0; i < policyCombinationTable[combination].numComponentsInCombination; i++) {
+        if (policyCombinationTable[combination].component[i].component == component) {
+            bFound = OMX_TRUE;
+            break;
+        }
+    }
+    return bFound;
+}
+
+
+OMX_POLICY_COMBINATION_LIST GetSupportingCombinations(OMX_COMPONENTINDEXTYPE componentRequestingPolicy)
+{
+    int i,j;
+    OMX_BOOL bThisCombinationSupports = OMX_FALSE;
+    OMX_POLICY_COMBINATION_LIST returnValue;
+
+    returnValue.numCombinations = 0;
+    for (i=0; i < numCombinations; i++) {
+        bThisCombinationSupports = OMX_FALSE;
+        for (j=0; j < policyCombinationTable[i].numComponentsInCombination; j++) {
+            if (policyCombinationTable[i].component[j].component == componentRequestingPolicy) {
+                returnValue.combinationList[returnValue.numCombinations++] = i;
+            }
+        }
+    }
+    return returnValue;
+}
+
+OMX_BOOL CanAllComponentsCoexist(OMX_COMPONENTINDEXTYPE componentRequestingPolicy,int *combination)
+{
+    int i,j;
+    OMX_POLICY_COMBINATION_LIST combinationList;
+    OMX_BOOL returnValue = OMX_FALSE;
+
+    /* First get a list of all the combinations that support the one requesting policy */
+    combinationList = GetSupportingCombinations(componentRequestingPolicy);
+
+    /* Then loop through the list and see if the other active components are also supported by any of the policies */
+    for (i=0; i < combinationList.numCombinations; i++) {
+        for (j=0; j < registeredComponents; j++) {
+            returnValue = IsComponentSupported(activeComponentList[j].component,combinationList.combinationList[i]);
+            if (returnValue == OMX_FALSE){
+                break;
+            }
+        }
+
+        /* if the value is true after looping through all registered components this combination supports all existing components */
+        if (returnValue == OMX_TRUE) {
+            *combination = combinationList.combinationList[i];
+            break;
+        }
+    }
+    return returnValue;
+}
+
+  
+int GetPriority(OMX_COMPONENTINDEXTYPE component, int combination)
+{
+    int i;
+    for (i=0; i < policyCombinationTable[combination].numComponentsInCombination; i++) {
+        if (policyCombinationTable[combination].component[i].component == component) {
+            return policyCombinationTable[combination].component[i].priority;
+        }
+    }
+    return -1;
+}
--- /dev/null	1969-12-31 18:00:00.000000000 -0600
+++ omx/system/src/openmax_il/omx_policy_manager/src/policytable.tbl	2008-11-10 16:46:59.000000000 -0600
@@ -0,0 +1,93 @@
+OMX_MP3_Decoder_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5,OMX_PCM_Decoder_COMPONENT,5,OMX_PCM_Encoder_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5,OMX_WMA_Decoder_COMPONENT,5,OMX_G711_Decoder_COMPONENT,5,OMX_G711_Encoder_COMPONENT,5,OMX_G722_Decoder_COMPONENT,5,OMX_G722_Encoder_COMPONENT,5,OMX_G723_Decoder_COMPONENT,5,OMX_G723_Encoder_COMPONENT,5,OMX_G726_Decoder_COMPONENT,5,OMX_G726_Encoder_COMPONENT,5,OMX_G729_Decoder_COMPONENT,5,OMX_G729_Encoder_COMPONENT,5,OMX_GSMFR_Decoder_COMPONENT,5,OMX_GSMHR_Decoder_COMPONENT,5,OMX_GSMFR_Encoder_COMPONENT,5,OMX_GSMHR_Encoder_COMPONENT,5,OMX_ILBC_Decoder_COMPONENT,5,OMX_ILBC_Encoder_COMPONENT,5,OMX_MPEG4_Decode_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_H263_Decode_COMPONENT,5,OMX_H263_Encode_COMPONENT,5,OMX_H264_Decode_COMPONENT,5,OMX_H264_Encode_COMPONENT,5,OMX_WMV_Decode_COMPONENT,5,OMX_MPEG2_Decode_COMPONENT,5,OMX_JPEG_Decoder_COMPONENT,5,OMX_JPEG_Encoder_COMPONENT,5,OMX_VPP_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_IMAADPCM_Decoder_COMPONENT,5,OMX_IMAADPCM_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_JPEG_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H264_Encode_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H264_Encode_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H264_Encode_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H264_Encode_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H264_Encode_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H263_Encode_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H263_Encode_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H263_Encode_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H263_Encode_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_H263_Encode_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5
+OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_JPEG_Encoder_COMPONENT,5,OMX_VPP_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_JPEG_Decoder_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_JPEG_Encoder_COMPONENT,5,OMX_VPP_COMPONENT,5,OMX_H263_Decode_COMPONENT,5,OMX_H264_Decode_COMPONENT,5,OMX_MPEG2_Decode_COMPONENT,5
+OMX_JPEG_Decoder_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_AAC_Encoder_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_NBAMR_Encoder_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5,OMX_CAMERA_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_MPEG4_Encode_COMPONENT,5,OMX_WBAMR_Encoder_COMPONENT,5
+OMX_WMV_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_WMV_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_WMV_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WMA_Decoder_COMPONENT,5
+OMX_MPEG2_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_MPEG2_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_VPP_COMPONENT,5
+OMX_MPEG2_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_AAC_Decoder_COMPONENT,5
+OMX_MPEG2_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_NBAMR_Decoder_COMPONENT,5
+OMX_MPEG2_Decode_COMPONENT,5,OMX_DISPLAY_COMPONENT,5,OMX_WBAMR_Decoder_COMPONENT,5
+OMX_DISPLAY_COMPONENT,5,OMX_DISPLAY_COMPONENT,5
+OMX_MP3_Decoder_COMPONENT,5
+OMX_AAC_Decoder_COMPONENT,5
+OMX_AAC_Encoder_COMPONENT,5
+OMX_PCM_Decoder_COMPONENT,5
+OMX_PCM_Encoder_COMPONENT,5
+OMX_NBAMR_Decoder_COMPONENT,5
+OMX_NBAMR_Encoder_COMPONENT,5
+OMX_WBAMR_Decoder_COMPONENT,5
+OMX_WBAMR_Encoder_COMPONENT,5
+OMX_WMA_Decoder_COMPONENT,5
+OMX_G711_Decoder_COMPONENT,5
+OMX_G711_Encoder_COMPONENT,5
+OMX_G722_Decoder_COMPONENT,5
+OMX_G722_Encoder_COMPONENT,5
+OMX_G723_Decoder_COMPONENT,5
+OMX_G723_Encoder_COMPONENT,5
+OMX_G726_Decoder_COMPONENT,5
+OMX_G726_Encoder_COMPONENT,5
+OMX_G729_Decoder_COMPONENT,5
+OMX_G729_Encoder_COMPONENT,5
+OMX_GSMFR_Decoder_COMPONENT,5
+OMX_GSMHR_Decoder_COMPONENT,5
+OMX_GSMFR_Encoder_COMPONENT,5
+OMX_GSMHR_Encoder_COMPONENT,5
+OMX_ILBC_Decoder_COMPONENT,5
+OMX_ILBC_Encoder_COMPONENT,5
+OMX_MPEG4_Decode_COMPONENT,5
+OMX_MPEG4_Encode_COMPONENT,5
+OMX_H263_Decode_COMPONENT,5
+OMX_H263_Encode_COMPONENT,5
+OMX_H264_Decode_COMPONENT,5
+OMX_H264_Encode_COMPONENT,5
+OMX_WMV_Decode_COMPONENT,5
+OMX_MPEG2_Decode_COMPONENT,5
+OMX_JPEG_Decoder_COMPONENT,5
+OMX_JPEG_Encoder_COMPONENT,5
+OMX_VPP_COMPONENT,5
+OMX_CAMERA_COMPONENT,5
+OMX_DISPLAY_COMPONENT,5
